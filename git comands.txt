1. $ git init - инициализация нового гит-репозитория, переиндексация уже существующего.

2. $ git clone [url] - клонирование удаленного репозитория с хостинга, делается единоразовано.

3. $ git add - проиндексировать файл, подготовить к коммиту, добавить к версионному контролю (отслеживанию).
   $ git add <file.name> - индексация (stage) конкретного файла.
   $ git add -A / git add - индексация всех файлов в активном каталоге.

4. $ git status - получает список всех изменений с файлами в репозитории.

5. $ git commit - фиксирует снимок проиндексированного изменения.
   $ git commit [-a/<file>/-m "message"] - вместо git add/выбранный файл/коммит прям в строке, бед редактора.
   $ git commit --amend -m "message for last commit before pushed" - отредактировать коммент последнего коммита.
     --ammend позволяет "отредактировать" последний коммит, т.е, можно внести "забытые" правки в тот же самый коммит.
   
6. $ touch .gitignore - создали игнор-лист (текстовый файл без расширений).
   $ git add .gitignore - проиндексировали.
   $ git commit .gitignore -m "message commit" - закоммитили и забыли.
 
7. $ git diff - показать, что именно было изменено в индексированном файле перед коммитом; показать изменения в, изменненном неиндексированном, файле (но отслеживаемом).
   $ git diff --cached - показать, что проиндексировано и войдёт в следующий коммит.
   $ git diff --staged - то же самое, что --cached, но для новых версий гита.
   
8. $ git rm --cached <file> - удаление файла из индекса, но оставить в рабочей области.
   $ rm <file> - удаление файла без пометки в индекс; git add/rm <file> добавит изменения для коммита.
     git checkout  <file> отменит изменения в рабочей области.
  
   $ git rm <file> - удаление файла из рабочей области (аналог из индекс + коммит).
     восстановить можно reset + checkout (удалить из индекса и отменить изменения).
   
9. $ git reset HEAD <file> - удалить из индекса (начинает закипать мозг).

10. $ git mv <old file name> <new file name> - неявно переименовывает выбранный файл и сразу добавляет в индекс.

11. $ git remote - просмотр подключенных настроенных удаленных репозиториев.
    $ git remote -v - просмоср с сопоставление краткого имени и полного пути.
    $ git remote show [удал. сервер] - получение информации об удаленном репозитории.

12. $ git remote add [сокращение] [url]: - добавление удаленного репозитория.

13  $ git fetch [имя удал. сервера] - забрать все данные с указанного сервера.
    $ git fetch origin - забрать все, если сервер был ранее склонирован. Т.к., при origin присвается при git clone.
      после fetch всегда нужно вручную делать merge с выбранной локальной веткой.
      
14. $ git push [удал. сервер] [ветка] - отправка данных на удаленный репозиторий.
    $ git push origin master - когда надо отправить ветку мастер на origin.

15. $ git pull - когда есть ветка, настроенная на отслеживание удалённой ветки (fetch + merge на активную ветку). 

16. Чтобы пользоваться SSH, нужно создать пару ключей, добавить в настройках GitHub, связать со своей машины.
При правильных настройках, при выполнении операции будет запрашиваться пароль для ключа (хотя это можно обойти).
  
  Для настройки необходимо выполнить:
    # Запускаем ssh-агента
    $ eval `ssh-agent.exe`
    
    # Создаем ключи (выбор папки, установка пароля на ключ).
    $ ssh-keygen -t rsa -C timofeev.e390@gmail.com
    
    # Добавляем на гитхабе (по-умолчанию in_rsa.pub).
    $ ssh-add
    
    # Подтверждаем аутентификацию
    $ ssh -T git@github.com
    
    После таких настроек базовые операции clone, push, pull проходят корректно, но запрашивает пароль.
    С протоколом HTTPS проще, ключи не нужны.






